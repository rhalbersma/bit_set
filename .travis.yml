#          Copyright Rein Halbersma 2014-2024.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

language: cpp
os: linux
dist: focal

matrix:
  include:
    # Temporariliy disabled until clang++ can compile <ranges> code on C-arrays
    # - env: TOOLSET=clang TOOLSET_VER=10 STDLIB=libstdc++ STDLIB_VER=10
    #   addons:
    #     apt:
    #       packages:
    #         - clang-10
    #         - g++-10
    #       sources:
    #         - sourceline: 'ppa:ubuntu-toolchain-r/test'
    #         - sourceline: 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main'
    #           key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    # - env: TOOLSET=clang TOOLSET_VER=11 STDLIB=libstdc++ STDLIB_VER=10
    #   addons:
    #     apt:
    #       packages:
    #         - clang-11
    #         - g++-10
    #       sources:
    #         - sourceline: 'ppa:ubuntu-toolchain-r/test'
    #         - sourceline: 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal main'
    #           key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    # Temporarily disabled until libc++ catches up with library support for Concepts and <=>
    # - env: TOOLSET=clang TOOLSET_VER=11 STDLIB=libc++ STDLIB_VER=11
    #   addons:
    #     apt:
    #       packages:
    #         - clang-11
    #         - libc++-11-dev
    #         - libc++abi-11-dev
    #       sources:
    #         - sourceline: 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal main'
    #           key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    - env: TOOLSET=gcc TOOLSET_VER=10 STDLIB=libstdc++ STDLIB_VER=10
      addons:
        apt:
          packages:
            - g++-10
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'

    - env: TOOLSET=gcc TOOLSET_VER=10 STDLIB=libstdc++ STDLIB_VER=10 CODE_COVERAGE=true
      addons:
        apt:
          packages:
            - g++-10
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'

    - env: TOOLSET=gcc TOOLSET_VER=11 STDLIB=libstdc++ STDLIB_VER=11

install:

################################################################################
# Third party dependencies are installed in ${TRAVIS_BUILD_DIR}/../third_party
################################################################################
- |
  THIRD_PARTY_DIR="${TRAVIS_BUILD_DIR}/../third_party"
  mkdir -p ${THIRD_PARTY_DIR}
  cd ${THIRD_PARTY_DIR}

################################################################################
# Install gcc-latest
################################################################################

- |
  if [[ "${STDLIB}" == "libstdc++" && "${STDLIB_VER}" == "11" ]]; then
    wget http://kayari.org/gcc-latest/gcc-latest.deb
    sudo dpkg -i gcc-latest.deb
    sudo ln -s /opt/gcc-latest/bin/gcc        /usr/bin/gcc-${TOOLSET_VER}
    sudo ln -s /opt/gcc-latest/bin/g++        /usr/bin/g++-${TOOLSET_VER}
    sudo ln -s /opt/gcc-latest/bin/gcov       /usr/bin/gcov-${TOOLSET_VER}
    sudo ln -s /opt/gcc-latest/bin/gcov-dump  /usr/bin/gcov-dump-${TOOLSET_VER}
    sudo ln -s /opt/gcc-latest/bin/gcov-tool  /usr/bin/gcov-tool-${TOOLSET_VER}
    sudo ln -s /opt/gcc-latest/bin/gcc-ar     /usr/bin/gcc-ar-${TOOLSET_VER}
    sudo ln -s /opt/gcc-latest/bin/gcc-nm     /usr/bin/gcc-nm-${TOOLSET_VER}
    sudo ln -s /opt/gcc-latest/bin/gcc-ranlib /usr/bin/gcc-ranlib-${TOOLSET_VER}
    sudo ldconfig /opt/gcc-latest/lib64
  fi

################################################################################
# Set clang, clang++, gcc, g++ and gcov to latest versions that are installed
################################################################################

- |
  if [[ "${TOOLSET}" == "clang" ]]; then
    sudo update-alternatives                                            \
    --install /usr/bin/clang   clang   /usr/bin/clang-${TOOLSET_VER} 10 \
    --slave   /usr/bin/clang++ clang++ /usr/bin/clang++-${TOOLSET_VER}
    sudo rm -rf /usr/local/clang-7.0.0
    clang   --version
    clang++ --version
  fi
  if [[ "${STDLIB}" == "libstdc++" ]]; then
    sudo update-alternatives                                                  \
    --install /usr/bin/gcc        gcc        /usr/bin/gcc-${STDLIB_VER} 10    \
    --slave   /usr/bin/g++        g++        /usr/bin/g++-${STDLIB_VER}       \
    --slave   /usr/bin/gcov       gcov       /usr/bin/gcov-${STDLIB_VER}      \
    --slave   /usr/bin/gcov-dump  gcov-dump  /usr/bin/gcov-dump-${STDLIB_VER} \
    --slave   /usr/bin/gcov-tool  gcov-tool  /usr/bin/gcov-tool-${STDLIB_VER} \
    --slave   /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-${STDLIB_VER}    \
    --slave   /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-${STDLIB_VER}    \
    --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-${STDLIB_VER}
    gcc  --version
    g++  --version
    gcov --version
  fi

################################################################################
# Install the latest Boost and build Boost.Test (compiled with the latest gcc)
################################################################################
- |
  BOOST_VERSION=1.74.0
  BOOST_DIR=${THIRD_PARTY_DIR}/boost-${BOOST_VERSION}
  BOOST_URL="https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION//\./_}.tar.bz2"
  BOOST_LIBS="test"
  BOOST_BUILD_TYPE="link=static variant=release"
  mkdir -p ${BOOST_DIR} && travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xj -C ${BOOST_DIR}
  cd ${BOOST_DIR}
  if [[ "${STDLIB}" == "libstdc++" ]]; then
    ./bootstrap.sh --with-toolset=gcc   --with-libraries=${BOOST_LIBS}
    sudo ./b2 -d0 -j10 install toolset=gcc   ${BOOST_BUILD_TYPE}
  elif [[ "${STDLIB}" == "libc++" ]]; then
    ./bootstrap.sh --with-toolset=clang --with-libraries=${BOOST_LIBS}
    sudo ./b2 -d0 -j10 install toolset=clang ${BOOST_BUILD_TYPE} cxxflags="-stdlib=libc++"
  fi
  cd ${THIRD_PARTY_DIR}

################################################################################
# Install the latest CMake
################################################################################
- |
  CMAKE_VERSION=3.18.1
  CMAKE_DIR=${THIRD_PARTY_DIR}/cmake-${CMAKE_VERSION}
  CMAKE_URL="http://www.cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
  mkdir -p ${CMAKE_DIR} && travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${CMAKE_DIR}
  export PATH=${CMAKE_DIR}/bin:${PATH}
  cmake --version

################################################################################
# Install the latest lcov
################################################################################
- |
  if [[ "${CODE_COVERAGE}" == "true" ]]; then
    sudo apt-get install -y libjson-perl libperlio-gzip-perl
    git clone https://github.com/linux-test-project/lcov.git
    LCOV_DIR=${THIRD_PARTY_DIR}/lcov
    export PATH=${LCOV_DIR}/bin:${PATH}
    lcov --version
  fi

before_script:
- |
  cd ${TRAVIS_BUILD_DIR}
  mkdir build && cd build
  if [[ "${TOOLSET}" == "clang" ]]; then
    CXX_COMPILER=clang++-${TOOLSET_VER}
  elif [[ "${TOOLSET}" == "gcc" ]]; then
    CXX_COMPILER=g++-${TOOLSET_VER}
  fi
  if [[ "${TOOLSET}" == "clang" && "${STDLIB}" == "libc++" ]]; then
    cmake ..                               \
      -DCMAKE_CXX_COMPILER=${CXX_COMPILER} \
      -DCMAKE_CXX_FLAGS="-stdlib=libc++"
  elif [[ "${CODE_COVERAGE}" == "true" ]]; then
    cmake ..                                \
      -DCMAKE_CXX_COMPILER=${CXX_COMPILER}  \
      -DCMAKE_CXX_FLAGS="-g -O0 --coverage"
  else
    cmake ..                               \
      -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
  fi

script:
- |
  cmake --build . -v
  ctest

after_success:
- |
  if [[ "${CODE_COVERAGE}" == "true" ]]; then
    lcov --directory . --capture --output-file coverage.info
    bash <(curl -s https://codecov.io/bash) -v -f coverage.info || echo 'Codecov failed to upload'
  fi

notifications:
  email: false
